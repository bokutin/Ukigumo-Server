[% WRAPPER 'include/layout.tt' %]

<p>Ukigumo はゆるふわであることを第一目標として設計されているので、適当にサーバーを設置していれば、プロジェクトの担当者がそれぞれすきなタイミングでつかえるようになります。</p><p>まあ、なんか気軽に設置して気軽につかえるやつがいまいまほしかったのでつくったというかんじです。</p><p>クライアント側とサーバー側は完全に分離しているんで、クライアント側は自分のすきな実装でできるし、サーバーの管理者の世話になる必要がまったくありません。その方が楽でしょうということで。というか俺は管理したくないので。いや、するけど、できるだけ最低限の手間でやりたいじゃん。セットアップも超簡単にできるようにしてあるというか、むしろ dotcloud とかにすぐに設置できるレベルですよ。</p><p>で、クライアント側はどうやってつかいはじめたらいいかということだけども、非常に簡単で、以下のように一個 HTTP Request をおくるだけでいいです。プロジェクトなどの登録は不要です。find_or_create 的につくられます。ゆるふわなんで。</p>
<pre class="code lang-perl">#!/usr/bin/perl
use strict;
use warnings;
use utf8;

use LWP::UserAgent;

my $ua = LWP::UserAgent-&gt;new();
$ua-&gt;post(&#39;http://localhost:9052/api/v1/report/add&#39;, [
    status =&gt; 1, # status code: SUCCESS:1, FAIL:2, N/A:3
    project =&gt; &#39;MyProj&#39;, # project name
    branch  =&gt; &#39;master&#39;, # branch name
    vc_log  =&gt; &lt;&lt;&#39;...&#39;,  # optional
commit 80202d0952c6f7d9aeb6dc24a12484e47e212c28
Author: Tokuhiro Matsuno &lt;tokuhirom@gmail.com&gt;
Date:   Tue Sep 6 10:11:08 2011 +0900

do not index production.pl
...
    body =&gt; &lt;&lt;&#39;...&#39;,     # test report body
t/00_compile.t .. 
1..1
ok 1 - use Acme::Failing;
ok
t/01_fail.t ..... 
not ok 1 - oops..
1..1

#   Failed test &#39;oops..&#39;
#   at t/01_fail.t line 6.
# Looks like you failed 1 test of 1.
Dubious, test returned 1 (wstat 256, 0x100)
Failed 1/1 subtests 

Test Summary Report
-------------------
t/01_fail.t   (Wstat: 256 Tests: 1 Failed: 1)
  Failed test:  1
  Non-zero exit status: 1
Files=2, Tests=2,  0 wallclock secs ( 0.04 usr  0.01 sys +  0.05 cusr  0.02 csys =  0.12 CPU)
Result: FAIL
...
    revision =&gt; &#39;80202d0952c6f7d9aeb6dc24a12484e47e212c28&#39;, # revision hash/number
    repo     =&gt; &#39;git://github.com/tokuhirom/Acme-Failing.git&#39;, # repository uri
]);</pre><p>ゆるふわなんで、へんなプロジェクトつくっちゃったりする日もあるとおもいますけど、そういうときは適当にすぐけせるんで、まあ適当にけせばいいんじゃないすかね。</p><p><a href="https://github.com/ukigumo/Ukigumo-Client/">https://github.com/ukigumo/Ukigumo-Client/</a><br />
Ukigumo::Client をつかうと、このクライアント側の部分を</p>
<ul>
<li>git の更新</li>
<li>prove によるテスト</li>
<li>IRC への通知</li>
</ul>
<p>ぐらいまでやってくれますけど、まあこれをつかう必要はかならずしもなくて、API をたたいてくれればそれでいいです。API つかうより楽なライブラリを一応用意してあるってだけなんです。</p><p>いうたら、こんぐらい単純にできるんです。とても簡単でしょ。これ、shell script で hirose31 さんとかだったらぺろってかくところなんでしょうけど、僕は shell script 力がひくくて無理でした。Ukigumo::Client はこのぐらいのことやってるスクリプトをダラダラとながくかいてるだけなんですよ。。というかシンプルにかいてみようとおもってかいたらおもった以上にみじかくかけてしまってちょっとショックをうけているレベルですよ。</p>
<pre class="code lang-perl">#!/usr/bin/perl
use strict;
use warnings;
use utf8;
use Capture::Tiny qw(tee_merged);
use LWP::UserAgent;

my $failed = 0;
sub run {
    system(@_)==0 or die &#34;FAIL: @_&#34;;
}

my $body = tee_merged {
    eval {
        run(&#34;git pull&#34;);
        run(&#34;perl Makefile.PL&#34;);
        run(&#34;make test&#34;);
    };
    if ($@) {
        $failed++;
        warn $@;
    }
};

my $revision = substr( `git rev-parse HEAD`, 0, 10 ) || &#39;Unknown&#39;;
my $branch   = `git branch|grep &#39;^*&#39;`;
   $branch =~ s/^\* //;
   $branch =~ s/\s*$//;
my $repository = `git remote -v | head -1| awk &#39;{print \$2}&#39;`;
   $repository =~ s/\n//;

print &#34;&#39;$revision&#39;, &#39;$repository&#39;, &#39;$branch&#39;\n&#34;;

my $ua = LWP::UserAgent-&gt;new();
my $res = $ua-&gt;post(
    &#39;http://localhost:9052/api/v1/report/add&#39;,
    [
        status   =&gt; $failed ? 2 : 1,             # status code: SUCCESS:1, FAIL:2, N/A:3
        project  =&gt; &#39;MyProj&#39;,      # project name
        branch   =&gt; $branch,       # branch name
        body     =&gt; $body,
        revision =&gt; $revision,
        repo     =&gt; $repository,
    ]
);
$res-&gt;is_success or die $res-&gt;as_string;</pre><p>こんぐらいのスクリプトをかいたら、あとは適当に cron でぶんまわしておけば、FAIL したときに表示はされますね。でもこれだけだとあんま意味ないんで、id:yappo の <a href="http://blog.yappo.jp/yappo/archives/000760.html">ikachan</a> サーバーと併用するか、im.kayac とかつかうとかした方がいいとおもいます。そんぐらいは自分でかけるよね?</p><p>まあそんなこんなで超簡単に設置できるし、超簡単にクライアント側もかけるからお気軽につかってみたらいいんじゃないすかね。</p>

[% END %]
